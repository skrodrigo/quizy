generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  funnels       Funnel[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Funnel {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  description String?
  isPublished Boolean       @default(false)
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps       FunnelStep[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("funnel")
}

model FunnelStep {
  id         String                 @id @default(cuid())
  funnelId   String
  funnel     Funnel                 @relation(fields: [funnelId], references: [id], onDelete: Cascade)
  order      Int
  title      String
  subtitle   String?
  components FunnelStepComponent[]
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt

  @@unique([funnelId, order])
  @@map("funnel_step")
}

model FunnelStepComponent {
  id         String     @id @default(cuid())
  stepId     String
  step       FunnelStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  type       String     
  order      Int
  content    Json       
  style      Json?     
  settings   Json?      
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([stepId, order])
  @@map("funnel_step_component")
}
